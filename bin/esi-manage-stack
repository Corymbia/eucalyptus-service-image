#!/usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2015, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
import euca2ools
import subprocess
import os
import argparse
from boto.cloudformation import CloudFormationConnection
from boto.sts import STSConnection
from urlparse import urlparse
import boto.cloudformation

(major, minor, patch) = euca2ools.__version__.split('-')[0].split('.')
if int(major) < 3 or (int(major) >= 3 and int(minor) < 1):
    print >> sys.stderr, "euca2ools version 3.1.0 or newer required."
    sys.exit(1)


class StackManager(object):
    def __init__(self):
        self._env = os.environ.copy()
        self._check_environment()

    def _check_binary(self, binary):
        try:
            with open(os.devnull, 'w') as nullfile:
                subprocess.call(os.path.join(os.getenv("EUCALYPTUS", "/") + binary), env=self._env, stdout=nullfile)
        except OSError:
            print >> sys.stderr, "Error: cannot find '{0}' binary.".format(binary)
            print >> sys.stderr, "Make sure EUCALYPTUS path variable is exported."
            sys.exit(1)

    def _check_environment(self):
        if not "EC2_URL" in self._env:
            print >> sys.stderr, "Error: Unable to find EC2_URL"
            print >> sys.stderr, "Make sure your eucarc is sourced."
            sys.exit(1)
        self._check_binary('/usr/bin/euare-accountlist')
        self._check_binary('/usr/sbin/euca-modify-property')

    def set_property(self, value, stack):
        operation = 'enable' if value else 'disable'
        service_property = 'services.{0}.worker.configured={1}'.format(stack, 'true' if value else 'false')
        cmd = [os.path.join(os.getenv("EUCALYPTUS", "/") + '/usr/sbin/euca-modify-property'), '-p', service_property]
        try:
            subprocess.check_call(cmd, env=os.environ.copy())
        except (OSError, subprocess.CalledProcessError):
            print >> sys.stderr, "Error: failed to {0} {1} service stack".format(operation, stack)
            print >> sys.stderr, "You'll have to {0} it manually.".format(operation)
            print >> sys.stderr
            print >> sys.stderr, "To {0} {1} service support, run this command:".format(operation, stack)
            print >> sys.stderr, " ".join(cmd)
            sys.exit(1)

    def enable(self, stack):
        self.set_property(True, stack)

    def disable(self, stack):
        self.set_property(False, stack)

    def check(self, stack):
        system_accounts = StackManager._list_system_accounts();
        token_url = urlparse(os.environ.get("TOKEN_URL"))
        cloudform_url = urlparse(os.environ.get("AWS_CLOUDFORMATION_URL"))
        STSConnection.DefaultRegionEndpoint = token_url.hostname
        port = token_url.port if token_url.port else 80
        sts = STSConnection(is_secure=False, port=port, path=token_url.path)
        role_arn="arn:aws:iam::{0}:role/{1}/{2}ServiceAdministrator".format(
                system_accounts['(eucalyptus){0}'.format(stack)],
                stack, stack.capitalize())
        role = sts.assume_role(role_arn=role_arn, role_session_name='Service')
        CloudFormationConnection.DefaultRegionEndpoint = cloudform_url.hostname
        euform_conn =  boto.cloudformation.connection.CloudFormationConnection(
            aws_access_key_id=role.credentials.access_key,
            aws_secret_access_key=role.credentials.secret_key,
            security_token=role.credentials.session_token,
            port=port, is_secure=False, path=cloudform_url.path)
        stacks = euform_conn.describe_stacks()
        if len(stacks) > 1:
            print "There are several active stacks in '{0}' service account. Something went wrong".format(stacks)
            sys.exit(1)
        if len(stacks) == 0:
            print "There is no active stacks in '{0}' service account".format(stack)
            sys.exit(1)
        stack_name = stacks[0].stack_name
        stack_status = stacks[0].stack_status
        if stack_name == 'DELETE_FAILED':
            stack_res = euform_conn.describe_stack_resources(stack_name)
            for r in stack_res:
                if r.resource_status == 'DELETE_FAILED':
                    print "Please manually delete {0} with id {1} to unblock stack delete process".format(
                        r.logical_resource_id, r.physical_resource_id)
        elif stack_status == 'CREATE_FAILED':
            print 'Stack creation failed. You need to check system logs for errors.'
        else:
            print "Stack '{0}' currently is in {1} state.".format(stack_name, stack_status)


    @staticmethod
    def _list_system_accounts():
        accounts = {}
        process = subprocess.Popen([os.path.join(os.getenv("EUCALYPTUS", "/") + '/usr/bin/euare-accountlist')],
                                   stdout=subprocess.PIPE)
        t = process.communicate()
        if process.returncode == 0:
            for account in t[0].split('\n'):
                a = account.split('\t')
                if len(a) == 2:
                    accounts[a[0]] = a[1]
        return accounts

if __name__ == "__main__":
    description = '''
    Service Image Stack manage tool:

    This tool provides an easy way to create or delete stack for
    Eucalyptus Service image.
    '''
    epilog = '''
    NOTE: In order to use this you MUST have cloud administrator
    credentials sourced in your environment (i.e., run the command
    '. /my/cred/path/eucarc').'''
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=description, epilog=epilog)
    parser.add_argument('-a', '--action', help='Action to take (create, check or delete) for the service image stack',
                        choices=['create', 'delete', 'check'])
    parser.add_argument('stack', help='Service image stack name (imaging or database)',
                        choices=['imaging', 'database'])

    args = parser.parse_args()
    sm = StackManager()

    if args.action == 'create':
        sm.enable(args.stack)
    elif args.action == 'delete':
        sm.disable(args.stack)
    elif args.action == 'check':
        sm.check(args.stack)
