#!/usr/bin/env python
#
# Copyright 2009-2015 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6750 Navigator Way, Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.

import sys
import argparse
from boto.cloudformation import CloudFormationConnection
from urlparse import urlparse
import boto.cloudformation
from esitoolsupport.esibase import EsiBase


class StackManager(EsiBase):

    def __init__(self, region):
        super(self.__class__, self).__init__(region if region else 'localhost')

    def set_property(self, value, stack):
        service_property = 'services.{0}.worker.configured'.format(stack)
        self._set_property(service_property, 'true' if value else 'false')

    def enable(self, stack):
        state = self._get_stack_status(stack, False)
        if state["status"] == 'NOT_FOUND':
            self.set_property(True, stack)
        elif state["status"] == 'CREATE_COMPLETE':
            print "Stack '{0}' is already created.".format(state["name"])
        else:
            print "Stack '{0}' currently is in {1} state. Please wait till the end of " \
                  "previous stack change operation.".format(state["name"], state["status"])

    def disable(self, stack):
        state = self._get_stack_status(stack)
        if state["status"] == 'CREATE_COMPLETE':
            self.set_property(False, stack)
        elif state["status"] == 'DELETE_IN_PROGRESS':
            print "Stack '{0}' is already in {1} state.".format(state["name"], state["status"])
        else:
            print "There are no '{0}' stack to delete".format(state["name"])

    def _get_euform_conn(self, stack):
        if self.get_env_var("TOKEN_URL") is None or self.get_env_var("AWS_CLOUDFORMATION_URL") is None:
            print "WARNING: Can't get stack status. Please make sure that you have " \
                  "Eucalyptus services up and running and env variables AWS_CLOUDFORMATION_URL " \
                  "and TOKEN_URL are set appropriately!"
            return None
        system_accounts = self.list_system_accounts()
        sts = self.get_sts_connection()
        role_arn = "arn:aws:iam::{0}:role/{1}/{2}ServiceAdministrator".format(
            system_accounts['(eucalyptus){0}'.format(stack)],
            stack, stack.capitalize())
        role = sts.assume_role(role_arn=role_arn, role_session_name='Service')
        cloudform_url = urlparse(self.get_env_var("AWS_CLOUDFORMATION_URL"))
        port = cloudform_url.port if cloudform_url.port else 80
        CloudFormationConnection.DefaultRegionEndpoint = cloudform_url.hostname
        euform_conn = boto.cloudformation.connection.CloudFormationConnection(
            aws_access_key_id=role.credentials.access_key,
            aws_secret_access_key=role.credentials.secret_key,
            security_token=role.credentials.session_token,
            port=port, is_secure=False, path=cloudform_url.path)
        return euform_conn

    def _get_stack_status(self, stack, exit_on_no_stack=True):
        conn = self._get_euform_conn(stack)
        if conn is None:
            return {"status": "NOT_FOUND"}
        stacks = conn.describe_stacks()
        if len(stacks) > 1:
            print "There are several active stacks in '{0}' service account. Something went wrong".format(stacks)
            sys.exit(1)
        if len(stacks) == 0:
            if exit_on_no_stack:
                print "There is no active stacks in '{0}' service account".format(stack)
                sys.exit(1)
            else:
                return {"status": "NOT_FOUND"}
        stack_name = stacks[0].stack_name
        stack_status = stacks[0].stack_status
        return {"status": stack_status, "name": stack_name}

    def check(self, stack):
        state = self._get_stack_status(stack)
        stack_status = state["status"]
        if stack_status == 'DELETE_FAILED':
            stack_res = self._get_euform_conn(stack).describe_stack_resources(state["name"])
            for r in stack_res:
                if r.resource_status == 'DELETE_FAILED':
                    print "Please manually delete {0} with id {1} to unblock stack delete process".format(
                        r.logical_resource_id, r.physical_resource_id)
        elif stack_status == 'NOT_FOUND':
            print "Can not detect stack status for {0} service".format(stack)
        elif stack_status == 'CREATE_FAILED':
            print 'Stack creation failed. You need to check system logs for errors.'
        else:
            print "Stack '{0}' currently is in {1} state.".format(state["name"], stack_status)


if __name__ == "__main__":
    description = '''
    Service Image Stack manage tool:

    This tool provides an easy way to create or delete stack for
    Eucalyptus Service image.
    '''

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=description)
    parser.add_argument('-a', '--action', help='Action to take (create, check or delete) for the service image stack',
                        choices=['create', 'delete', 'check'])
    parser.add_argument('stack', help='Service image stack name (imaging or database)',
                        choices=['imaging', 'database'])
    parser.add_argument('--region', metavar='REGION', help=('region '
                    'name to search when looking up config file data'))

    args = parser.parse_args()
    sm = StackManager(args.region)

    if args.action == 'create':
        sm.enable(args.stack)
    elif args.action == 'delete':
        sm.disable(args.stack)
    elif args.action == 'check':
        sm.check(args.stack)
