#!/usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2015, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
import euca2ools
import subprocess
import os
import argparse

(major, minor, patch) = euca2ools.__version__.split('-')[0].split('.')
if int(major) < 3 or (int(major) >= 3 and int(minor) < 1):
    print >> sys.stderr, "euca2ools version 3.1.0 or newer required."
    sys.exit(1)


class StackManager(object):

    STACK_TO_PROPERTY = {'imaging': 'services.imaging.worker.configured',
                         'database': 'services.database.worker.configured'}

    def __init__(self):
        self._check_environment()

    def _check_environment(self):
        env = os.environ.copy()
        if not "EC2_URL" in env:
            print >> sys.stderr, "Error: Unable to find EC2_URL"
            print >> sys.stderr, "Make sure your eucarc is sourced."
            sys.exit(1)
        cmd = [os.path.join(os.getenv("EUCALYPTUS", "/") + '/usr/sbin/euca-modify-property')]
        try:
            with open(os.devnull, 'w') as nullfile:
                subprocess.call(cmd, env=env, stdout=nullfile)
        except OSError:
            print >> sys.stderr, "Error: cannot find 'euca-modify-property' binary."
            print >> sys.stderr, "Make sure EUCALYPTUS path variable is exported."
            sys.exit(1)

    def set_property(self, value, property_name):
        operation = 'enable' if value else 'disable'
        service_property = '{0}={1}'.format(property_name, 'true' if value else 'false')
        cmd = [os.path.join(os.getenv("EUCALYPTUS", "/") + '/usr/sbin/euca-modify-property'), '-p', service_property]
        try:
            subprocess.check_call(cmd, env=os.environ.copy())
        except (OSError, subprocess.CalledProcessError):
            print >> sys.stderr, "Error: failed to {0} imaging service stack".format(operation)
            print >> sys.stderr, "You'll have to {0} it manually.".format(operation)
            print >> sys.stderr
            print >> sys.stderr, "To {0} imaging service support, run this command:".format(operation)
            print >> sys.stderr, " ".join(cmd)
            sys.exit(1)

    def enable(self, stack):
        self.set_property(True, StackManager.STACK_TO_PROPERTY[stack])

    def disable(self, stack):
        self.set_property(False, StackManager.STACK_TO_PROPERTY[stack])


if __name__ == "__main__":
    description = '''
    Service Image Stack manage tool:

    This tool provides an easy way to create or delete stack for
    Eucalyptus Service image.
    '''
    epilog = '''
    NOTE: In order to use this you MUST have cloud administrator
    credentials sourced in your environment (i.e., run the command
    '. /my/cred/path/eucarc').'''
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=description, epilog=epilog)
    parser.add_argument('-a', '--action', help='Action to take (create or delete) for the service image stack',
                        choices=['create', 'delete'])
    parser.add_argument('stack', help='Service image stack name (imaging or database)',
                        choices=['imaging', 'database'])

    args = parser.parse_args()
    sm = StackManager()

    if args.action == 'create':
        sm.enable(args.stack)
    elif args.action == 'delete':
        sm.disable(args.stack)